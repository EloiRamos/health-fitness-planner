import streamlit as st
from agno.agent import Agent
from agno.models.google import Gemini
import os
from datetime import datetime

st.set_page_config(
    page_title="AI Health & Fitness Planner",
    page_icon="üèãÔ∏è‚Äç‚ôÇÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

st.markdown("""
    <style>
    .main {
        padding: 2rem;
    }
    .stButton>button {
        width: 100%;
        border-radius: 5px;
        height: 3em;
    }
    .success-box {
        padding: 1rem;
        border-radius: 0.5rem;
        background-color: #f0fff4;
        border: 1px solid #9ae6b4;
    }
    .warning-box {
        padding: 1rem;
        border-radius: 0.5rem;
        background-color: #fffaf0;
        border: 1px solid #fbd38d;
    }
    div[data-testid="stExpander"] div[role="button"] p {
        font-size: 1.1rem;
        font-weight: 600;
    }
    </style>
""", unsafe_allow_html=True)

def get_timestamped_filename(plan_type):
    """Generate a timestamped filename for the plan export."""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    return f"{plan_type}_plan_{timestamp}.md"

def generate_dietary_markdown(plan_data, user_profile):
    """Generate markdown content for dietary plan."""
    return f"""# Dietary Plan Report

**Generated on:** {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

## User Profile
{user_profile}

## Why This Plan Works
{plan_data.get('why_this_plan_works', 'Information not available')}

## Meal Plan
{plan_data.get('meal_plan', 'Plan not available')}

## Important Considerations
{plan_data.get('important_considerations', 'No specific considerations provided')}

---
*This report was generated by AI Health & Fitness Planner*
"""

def generate_fitness_markdown(plan_data, user_profile):
    """Generate markdown content for fitness plan."""
    return f"""# Fitness Plan Report

**Generated on:** {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

## User Profile
{user_profile}

## Goals
{plan_data.get('goals', 'Goals not specified')}

## Exercise Routine
{plan_data.get('routine', 'Routine not available')}

## Pro Tips
{plan_data.get('tips', 'No tips provided')}

---
*This report was generated by AI Health & Fitness Planner*
"""

def generate_combined_markdown(combined_data, user_profile):
    """Generate markdown content for combined health plan."""
    try:
        dietary_data = combined_data.get('dietary_plan', {})
        fitness_data = combined_data.get('fitness_plan', {})

        why_plan_works = dietary_data.get('why_this_plan_works', 'Information not available')
        meal_plan = dietary_data.get('meal_plan', 'Plan not available')
        considerations = dietary_data.get('important_considerations', 'No specific considerations provided')
        goals = fitness_data.get('goals', 'Goals not specified')
        routine = fitness_data.get('routine', 'Routine not available')
        tips = fitness_data.get('tips', 'No tips provided')

        return f"""# Complete Health & Fitness Plan Report

**Generated on:** {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

## User Profile
{user_profile}

---

## üçΩÔ∏è Dietary Plan

### Why This Plan Works
{why_plan_works}

### Meal Plan
{meal_plan}

### Important Considerations
{considerations}

---

## üí™ Fitness Plan

### Goals
{goals}

### Exercise Routine
{routine}

### Pro Tips
{tips}

---
*This comprehensive report was generated by AI Health & Fitness Planner*
"""
    except Exception as e:
        return f"""# Complete Health & Fitness Plan Report

**Generated on:** {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

## Error
An error occurred: {str(e)}

## User Profile
{user_profile}
"""

def save_plan_to_file(plan_data, plan_type, user_profile, output_dir="reports"):
    """Save plan data to a markdown file."""
    try:
        abs_output_dir = os.path.abspath(output_dir)
        os.makedirs(abs_output_dir, exist_ok=True)

        filename = get_timestamped_filename(plan_type)
        filepath = os.path.join(abs_output_dir, filename)

        if plan_type == "combined":
            markdown_content = generate_combined_markdown(plan_data, user_profile)
        elif plan_type == "dietary":
            markdown_content = generate_dietary_markdown(plan_data, user_profile)
        elif plan_type == "fitness":
            markdown_content = generate_fitness_markdown(plan_data, user_profile)
        else:
            raise ValueError(f"Unknown plan type: {plan_type}")

        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(markdown_content)

        if not os.path.exists(filepath):
            raise IOError(f"File was not created at {filepath}")

        return filepath, abs_output_dir

    except Exception as e:
        raise Exception(f"Error saving file: {str(e)}") from e

def display_dietary_plan(plan_content):
    with st.expander("üìã Your Personalized Dietary Plan", expanded=True):
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.markdown("### üéØ Why this plan works")
            st.info(plan_content.get("why_this_plan_works", "Information not available"))
            st.markdown("### üçΩÔ∏è Meal Plan")
            st.write(plan_content.get("meal_plan", "Plan not available"))
        
        with col2:
            st.markdown("### ‚ö†Ô∏è Important Considerations")
            considerations = plan_content.get("important_considerations", "").split('\n')
            for consideration in considerations:
                if consideration.strip():
                    st.warning(consideration)

def display_fitness_plan(plan_content):
    with st.expander("üí™ Your Personalized Fitness Plan", expanded=True):
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.markdown("### üéØ Goals")
            st.success(plan_content.get("goals", "Goals not specified"))
            st.markdown("### üèãÔ∏è‚Äç‚ôÇÔ∏è Exercise Routine")
            st.write(plan_content.get("routine", "Routine not available"))
        
        with col2:
            st.markdown("### üí° Pro Tips")
            tips = plan_content.get("tips", "").split('\n')
            for tip in tips:
                if tip.strip():
                    st.info(tip)

def main():
    # Initialize session state
    if 'dietary_plan' not in st.session_state:
        st.session_state.dietary_plan = {}
        st.session_state.fitness_plan = {}
        st.session_state.qa_pairs = []
        st.session_state.plans_generated = False
        st.session_state.user_profile_data = {}

    st.title("üèãÔ∏è‚Äç‚ôÇÔ∏è AI Health & Fitness Planner")
    st.markdown("""
        <div style='background-color: #00008B; padding: 1rem; border-radius: 0.5rem; margin-bottom: 2rem; color: white;'>
        Get personalized dietary and fitness plans tailored to your goals and preferences.
        Our AI-powered system considers your unique profile to create the perfect plan for you.
        </div>
    """, unsafe_allow_html=True)

    with st.sidebar:
        st.header("üîë API Configuration")
        gemini_api_key = st.text_input(
            "Gemini API Key",
            type="password",
            help="Enter your Gemini API key to access the service"
        )
        
        if not gemini_api_key:
            st.warning("‚ö†Ô∏è Please enter your Gemini API Key to proceed")
            st.markdown("[Get your API key here](https://aistudio.google.com/apikey)")
            return
        
        st.success("‚úÖ API Key accepted!")

    if gemini_api_key:
        try:
            gemini_model = Gemini(id="gemini-2.5-flash-preview-05-20", api_key=gemini_api_key)
        except Exception as e:
            st.error(f"‚ùå Error initializing Gemini model: {e}")
            return

        st.header("üë§ Your Profile")
        
        col1, col2 = st.columns(2)
        
        with col1:
            age = st.number_input("Age", min_value=10, max_value=100, value=25, step=1)
            height = st.number_input("Height (cm)", min_value=100.0, max_value=250.0, value=170.0, step=0.1)
            activity_level = st.selectbox(
                "Activity Level",
                options=["Sedentary", "Lightly Active", "Moderately Active", "Very Active", "Extremely Active"]
            )
            dietary_preferences = st.selectbox(
                "Dietary Preferences",
                options=["Vegetarian", "Keto", "Gluten Free", "Low Carb", "Dairy Free"]
            )

        with col2:
            weight = st.number_input("Weight (kg)", min_value=20.0, max_value=300.0, value=70.0, step=0.1)
            sex = st.selectbox("Sex", options=["Male", "Female", "Other"])
            fitness_goals = st.selectbox(
                "Fitness Goals",
                options=["Lose Weight", "Gain Muscle", "Endurance", "Stay Fit", "Strength Training"]
            )

        if st.button("üéØ Generate My Personalized Plan", use_container_width=True, type="primary"):
            with st.spinner("Creating your perfect health and fitness routine..."):
                try:
                    dietary_agent = Agent(
                        name="Dietary Expert",
                        role="Provides personalized dietary recommendations",
                        model=gemini_model,
                        instructions=[
                            "Consider the user's input, including dietary restrictions and preferences.",
                            "Suggest a detailed meal plan for the day, including breakfast, lunch, dinner, and snacks.",
                            "Provide a brief explanation of why the plan is suited to the user's goals.",
                            "Focus on clarity, coherence, and quality of the recommendations.",
                        ]
                    )

                    fitness_agent = Agent(
                        name="Fitness Expert",
                        role="Provides personalized fitness recommendations",
                        model=gemini_model,
                        instructions=[
                            "Provide exercises tailored to the user's goals.",
                            "Include warm-up, main workout, and cool-down exercises.",
                            "Explain the benefits of each recommended exercise.",
                            "Ensure the plan is actionable and detailed.",
                        ]
                    )

                    user_profile = f"""
                    Age: {age}
                    Weight: {weight}kg
                    Height: {height}cm
                    Sex: {sex}
                    Activity Level: {activity_level}
                    Dietary Preferences: {dietary_preferences}
                    Fitness Goals: {fitness_goals}
                    """

                    dietary_plan_response = dietary_agent.run(user_profile)
                    dietary_plan = {
                        "why_this_plan_works": "High Protein, Healthy Fats, Moderate Carbohydrates, and Caloric Balance",
                        "meal_plan": dietary_plan_response.content,
                        "important_considerations": """
- Hydration: Drink plenty of water throughout the day
- Electrolytes: Monitor sodium, potassium, and magnesium levels
- Fiber: Ensure adequate intake through vegetables and fruits
- Listen to your body: Adjust portion sizes as needed
                        """
                    }

                    fitness_plan_response = fitness_agent.run(user_profile)
                    fitness_plan = {
                        "goals": "Build strength, improve endurance, and maintain overall fitness",
                        "routine": fitness_plan_response.content,
                        "tips": """
- Track your progress regularly
- Allow proper rest between workouts
- Focus on proper form
- Stay consistent with your routine
                        """
                    }

                    # Store in session state
                    st.session_state.dietary_plan = dietary_plan
                    st.session_state.fitness_plan = fitness_plan
                    st.session_state.plans_generated = True
                    st.session_state.qa_pairs = []
                    st.session_state.user_profile_data = {
                        'age': age,
                        'weight': weight,
                        'height': height,
                        'sex': sex,
                        'activity_level': activity_level,
                        'dietary_preferences': dietary_preferences,
                        'fitness_goals': fitness_goals
                    }

                    st.success("‚úÖ Plans generated successfully!")
                    st.rerun()

                except Exception as e:
                    st.error(f"‚ùå An error occurred: {e}")

        # Display plans if they exist (OUTSIDE the generation button)
        if st.session_state.plans_generated:
            display_dietary_plan(st.session_state.dietary_plan)
            display_fitness_plan(st.session_state.fitness_plan)

            # Export section (OUTSIDE the generation button)
            st.header("üìÑ Export Your Plans")
            st.markdown("Save your personalized plans as markdown files for offline reference.")

            col1, col2, col3 = st.columns(3)

            # Get user profile data
            profile = st.session_state.user_profile_data
            user_profile_formatted = f"""
**Age:** {profile.get('age')}
**Weight:** {profile.get('weight')}kg
**Height:** {profile.get('height')}cm
**Sex:** {profile.get('sex')}
**Activity Level:** {profile.get('activity_level')}
**Dietary Preferences:** {profile.get('dietary_preferences')}
**Fitness Goals:** {profile.get('fitness_goals')}
"""

            with col1:
                if st.button("üìã Export Dietary Plan", use_container_width=True):
                    try:
                        filepath, reports_dir = save_plan_to_file(
                            st.session_state.dietary_plan, 
                            "dietary", 
                            user_profile_formatted
                        )
                        file_size = os.path.getsize(filepath)
                        st.success(f"‚úÖ Dietary plan exported!")
                        st.info(f"üìÅ Location: `{reports_dir}`")
                        st.info(f"üìÑ File: `{os.path.basename(filepath)}` ({file_size} bytes)")
                    except Exception as e:
                        st.error(f"‚ùå Failed to export: {str(e)}")

            with col2:
                if st.button("üí™ Export Fitness Plan", use_container_width=True):
                    try:
                        filepath, reports_dir = save_plan_to_file(
                            st.session_state.fitness_plan, 
                            "fitness", 
                            user_profile_formatted
                        )
                        file_size = os.path.getsize(filepath)
                        st.success(f"‚úÖ Fitness plan exported!")
                        st.info(f"üìÅ Location: `{reports_dir}`")
                        st.info(f"üìÑ File: `{os.path.basename(filepath)}` ({file_size} bytes)")
                    except Exception as e:
                        st.error(f"‚ùå Failed to export: {str(e)}")

            with col3:
                if st.button("üìãüí™ Export Combined", use_container_width=True):
                    try:
                        combined_data = {
                            "dietary_plan": st.session_state.dietary_plan,
                            "fitness_plan": st.session_state.fitness_plan
                        }
                        filepath, reports_dir = save_plan_to_file(
                            combined_data, 
                            "combined", 
                            user_profile_formatted
                        )
                        file_size = os.path.getsize(filepath)
                        st.success(f"‚úÖ Combined report exported!")
                        st.info(f"üìÅ Location: `{reports_dir}`")
                        st.info(f"üìÑ File: `{os.path.basename(filepath)}` ({file_size} bytes)")
                    except Exception as e:
                        st.error(f"‚ùå Failed to export: {str(e)}")

            # Q&A Section
            st.header("‚ùì Questions about your plan?")
            question_input = st.text_input("What would you like to know?")

            if st.button("Get Answer", use_container_width=True):
                if question_input:
                    with st.spinner("Finding the best answer for you..."):
                        dietary_content = st.session_state.dietary_plan.get('meal_plan', '')
                        fitness_content = st.session_state.fitness_plan.get('routine', '')
                        
                        try:
                            qa_agent = Agent(
                                name="Health & Fitness Q&A Assistant",
                                role="Answer questions about the user's personalized health and fitness plans",
                                model=gemini_model,
                                instructions=[
                                    "You have access to the user's personalized dietary and fitness plans.",
                                    "Answer questions clearly and concisely based on the provided plans.",
                                    "If the answer is not in the plans, provide general health/fitness guidance.",
                                    "Be encouraging and supportive in your responses."
                                ]
                            )
                            
                            context = f"""
Here are the user's personalized plans:

DIETARY PLAN:
{dietary_content}

FITNESS PLAN:
{fitness_content}

USER QUESTION: {question_input}

Please provide a helpful, accurate answer based on the plans above.
"""
                            
                            run_response = qa_agent.run(context)
                            answer = run_response.content if hasattr(run_response, 'content') else "Sorry, I couldn't generate a response."
                            st.session_state.qa_pairs.append((question_input, answer))
                            st.rerun()
                            
                        except Exception as e:
                            st.error(f"‚ùå An error occurred: {e}")
                            with st.expander("üîç Error Details"):
                                import traceback
                                st.code(traceback.format_exc())

            if st.session_state.qa_pairs:
                st.header("üí¨ Q&A History")
                for question, answer in st.session_state.qa_pairs:
                    with st.container():
                        st.markdown(f"**Q:** {question}")
                        st.markdown(f"**A:** {answer}")
                        st.divider()

if __name__ == "__main__":
    main()